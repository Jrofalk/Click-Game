{"version":3,"sources":["components/Cards/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","id","src","image","onClick","selectCard","Wrapper","children","Title","App","state","cards","score","bestScore","clicked","gameLoss","setState","console","log","event","imageSelected","target","indexOf","sort","Math","random","concat","this","map","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+rDAaeA,MAVf,SAAcC,GACV,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,GAAIF,EAAME,GAAIC,IAAKH,EAAMI,MAAOC,QAASL,EAAMM,gB,MCA/CC,MAJf,SAAiBP,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMQ,W,MCK5BC,MALf,SAAeT,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMQ,W,OCgEvBE,E,2MA1DbC,MAAQ,CACNC,QACAC,MAAQ,EACRC,UAAW,EACXC,QAAS,I,EAGXC,SAAW,WACN,EAAKL,MAAME,MAAQ,EAAKF,MAAMG,YAC/B,EAAKG,SAAS,CAACH,UAAW,EAAKH,MAAME,QACrCK,QAAQC,IAAI,EAAKR,MAAMG,YAEzB,EAAKG,SAAS,CAAEJ,MAAO,IACvB,EAAKI,SAAS,CAACF,QAAS,M,EAG1BT,WAAa,SAAAc,GACX,IAAMC,EAAgBD,EAAME,OAAOpB,GAEjB,EAAKS,MAAMI,QAAQQ,QAAQF,IAAkB,GAI7D,EAAKL,WAEL,EAAKL,MAAMC,MAAMY,MAAK,kBAAMC,KAAKC,SAAW,QAG5C,EAAKT,SAAS,CAAEJ,MAAO,EAAKF,MAAME,MAAQ,IAC1C,EAAKI,SAAS,CAACF,QAAS,EAAKJ,MAAMI,QAAQY,OAAON,KAClD,EAAKV,MAAMC,MAAMY,MAAK,kBAAMC,KAAKC,SAAW,MACpB,KAArB,EAAKf,MAAME,OACZ,EAAKG,a,wEAMH,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,mCAAmCY,KAAKjB,MAAME,MAA9C,eAAiEe,KAAKjB,MAAMG,WAC3Ec,KAAKjB,MAAMC,MAAMiB,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACExB,WAAY,EAAKA,WACjBJ,GAAI4B,EAAK5B,GACT6B,IAAKD,EAAK5B,GACVE,MAAO0B,EAAK1B,gB,GAjDJ4B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea7ae06f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"img-container\">\r\n          <img id={props.id} src={props.image} onClick={props.selectCard}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n  }\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport Card from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport cards from \"./cards.json\";\n\n//Fix logic so that you dont have to click an image again to present win scenario\n\n\nclass App extends Component {\n\n  state = {\n    cards,\n    score:  0,\n    bestScore: 0,\n    clicked: []\n  };\n  \n  gameLoss = () => {\n    if(this.state.score > this.state.bestScore){\n      this.setState({bestScore: this.state.score})\n      console.log(this.state.bestScore);\n    }\n    this.setState({ score: 0});\n    this.setState({clicked: []});\n  }\n  \n  selectCard = event => {\n    const imageSelected = event.target.id;\n    //Evaulates whether the card has been clicked on.\n    const isClicked = this.state.clicked.indexOf(imageSelected) > -1;\n    \n  \n    if(isClicked){\n      this.gameLoss();\n      //This sorts the cards.\n      this.state.cards.sort(() => Math.random() - 0.5)\n    }\n    else{\n      this.setState({ score: this.state.score + 1 });\n      this.setState({clicked: this.state.clicked.concat(imageSelected)})\n      this.state.cards.sort(() => Math.random() - 0.5)\n      if(this.state.score === 10) {\n        this.gameLoss();\n        \n      }\n    }\n   }\n\nrender() {\n  return (\n    <Wrapper>\n      <Title>Rose Tattoo Current Streak:{this.state.score} Best Score:{this.state.bestScore}</Title>\n      {this.state.cards.map(card => (\n        <Card\n          selectCard={this.selectCard}\n          id={card.id}\n          key={card.id}\n          image={card.image}\n        />\n      ))}\n    </Wrapper>\n  );\n}\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}